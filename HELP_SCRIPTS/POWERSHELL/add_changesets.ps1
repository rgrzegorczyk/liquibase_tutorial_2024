####################
#### ATTENTION ####
####################
###BEFORE RUNNING THIS SCRIPT PROVIDE BACKUP OF YOUR /DATABASE/HR/ FOLDER and make some test runs on it first!
####################
# Global variables
$space = ' '
$new_line = "`n"
# `n means - add enter
#username on all changesets
$username  = "Pretius"
$context   = "context:INITIAL_SYNC"
$labels    = "labels:INITIAL_SYNC"
$endDelimiter = "endDelimier:\n/" #used for replaceable changesets



###### SET REPLACEABLE OBJECTS ####
# Execute this script in /database/hr/ folder where are folders like package_spec, type_spec, table etc
# it takes path to your objects and assigns it to a variable (path to folders with replaceable objects like package_spec, triggers, views)
# folder namings are exact the same like those auto generated by SQLcl liquibase generate-schema --split command
# If folder does not exists -script will skip it
# If needed, adjust this script to additional folders
if (Test-Path -Path ".\PACKAGE_SPEC") {
    $package_spec = (Get-ChildItem -Path ".\PACKAGE_SPEC").FullName
} else {
    $package_spec = @()
}a

if (Test-Path -Path ".\PACKAGE_BODY") {
    $package_body = (Get-ChildItem -Path ".\PACKAGE_BODY").FullName
} else {
    $package_body = @()
}

if (Test-Path -Path ".\PROCEDURE") {
    $procedure = (Get-ChildItem -Path ".\PROCEDURE").FullName
} else {
    $procedure = @()
}

if (Test-Path -Path ".\FUNCTION") {
    $function = (Get-ChildItem -Path ".\FUNCTION").FullName
} else {
    $function = @()
}

if (Test-Path -Path ".\VIEW") {
    $view = (Get-ChildItem -Path ".\VIEW").FullName
} else {
    $view = @()
}

if (Test-Path -Path ".\MATERIALIZED_VIEW") {
    $materialized_view = (Get-ChildItem -Path ".\MATERIALIZED_VIEW").FullName
} else {
    $materialized_view = @()
}

if (Test-Path -Path ".\TRIGGER") {
    $trigger = (Get-ChildItem -Path ".\TRIGGER").FullName
} else {
    $trigger = @()
}

if (Test-Path -Path ".\SYNONYM") {
    $synonym = (Get-ChildItem -Path ".\SYNONYM").FullName
} else {
    $synonym = @()
}

if (Test-Path -Path ".\TYPE_SPEC") {
    $type_spec = (Get-ChildItem -Path ".\TYPE_SPEC").FullName
} else {
    $type_spec = @()
}

if (Test-Path -Path ".\TYPE_BODY") {
    $type_body = (Get-ChildItem -Path ".\TYPE_BODY").FullName
} else {
    $type_body = @()
}

if (Test-Path -Path ".\SYNONYM") {
    $synonym = (Get-ChildItem -Path ".\SYNONYM").FullName
} else {
    $synonym = @()
}

# merge all replaceable objects into one
$replaceable = $package_spec + $package_body + $procedure +$function + $view + $trigger + $synonym + $type_spec + $type_body + $materialized_view + $synonym  # ADD OTHERS IF YOU HAVE MORE FOLDERS

###### SET NON - REPLACEABLE OBJECTS ####
#path to folders with NON - replaceable objects like table or sequences
if (Test-Path -Path ".\TABLE") {
    $table = (Get-ChildItem -Path ".\TABLE").FullName
} else {
    $table = @()
}

if (Test-Path -Path ".\SEQUENCE") {
    $sequence = (Get-ChildItem -Path ".\SEQUENCE").FullName
} else {
    $sequence = @()
}

if (Test-Path -Path ".\INDEX") {
    $index = (Get-ChildItem -Path ".\INDEX").FullName
} else {
    $index = @()
}

if (Test-Path -Path ".\REF_CONSTRAINT") {
    $ref_constraint = (Get-ChildItem -Path ".\REF_CONSTRAINT").FullName
} else {
    $ref_constraint = @()
}


if (Test-Path -Path ".\DB_LINK") {
    $db_link = (Get-ChildItem -Path ".\DB_LINK").FullName
} else {
    $db_link = @()
}

if (Test-Path -Path ".\JOB") {
    $job = (Get-ChildItem -Path ".\JOB").FullName
} else {
    $job = @()
}

if (Test-Path -Path ".\COMMENT") {
    $comment = (Get-ChildItem -Path ".\COMMENT").FullName
} else {
    $comment = @()
}

# merge all NON-replaceable objects into one
$non_replaceable = $table + $sequence + $index + $ref_constraint + $db_link + $job +$comment # ADD OTHERS IF YOU HAVE MORE FOLDERS
#set all objects
$all = $replaceable + $non_replaceable;

###################################################
### CREATE CHANGESETS FOR REPLACEABLE  OBJECTS ####
###################################################
#do for each file / LOOP
ForEach ($sqlfile in $all) {
    # get original file content -raw is important to not lose your file formatting e.g. spaces and new lines
    $original_content = Get-content -Raw $sqlfile
    #take only filename without extension / we will use it later as changeset ID
    $filename = [System.IO.Path]::GetFileNameWithoutExtension("$sqlfile")

    If ($original_content -imatch "--liquibase formatted sql") 
    {
        echo "File already has changeset - nothing to add!"
        $filename

    }
        else #add changesets
    {
        # Set appropriate runOnChange parameter
        switch ($sqlfile) {
            {$_ -in $replaceable} {$runOnChange = "runOnChange:true endDelimiter:\n/" + $space}
            {$_ -in $non_replaceable} {$runOnChange = "runOnChange:false" + $space}     
        }
        #create liquibase syntax
        $liquibase      = "--liquibase formatted sql" + $new_line
        $changeset      = "--changeset" + $space
        $changeset_id   = $filename + $space
        $comment        = "--comment Initial changeset for $filename" + "`n"

        #add liquibase's changeset parameters on top of modified file
        $content_modified = $liquibase + $changeset +$username + ":"  + $changeset_id + $runOnChange + $context + $space + $labels + $new_line + $comment + $original_content
        #+ $rollback
        #set new content of modified file
        $content_modified | Set-Content $sqlfile
    }
    }

